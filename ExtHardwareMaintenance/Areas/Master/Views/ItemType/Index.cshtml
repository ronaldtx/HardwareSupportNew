@model System.Collections.IEnumerable
@using Ext.Net;
@using Ext.Net.MVC;
@{
    ViewBag.Title = "List Item Type";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}

@section headtag
{
    <script>
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };

        var onComboBoxSelect = function (combo) {
            var store = combo.up("gridpanel").getStore();

            store.pageSize = parseInt(combo.getValue(), 10);
            store.reload();
        };

        var NewForm = function (record) {
            Ext.getCmp('myFormPanel').setTitle('New Item Type');
            Ext.getCmp('btnNew').show();
            Ext.getCmp('btnEdit').hide();
            App.myFormPanel.reset();
            App.windowForm.show();
        };

        var EditForm = function (record) {
            Ext.getCmp('TxtId').setValue(record.data.Id);
            Ext.getCmp('TxtName').setValue(record.data.Name);
            Ext.getCmp('TxtDescription').setValue(record.data.Description);
            Ext.getCmp('myFormPanel').setTitle('Edit Item Type');
            Ext.getCmp('btnNew').hide();
            Ext.getCmp('btnEdit').show();
            App.windowForm.show();
        };

        var ActionForm = function (command, record) {
            if (command == 'Edit') {
                this.EditForm(record);
            }
            else {
                Ext.Ajax.request({
                    url: '/ItemType/SaveDataDelete/'+record.data.Id,
                    success: function (response, opts) {
                        //var obj = Ext.decode(response.responseText);
                        Ext.getCmp('GridListItemType').getStore().reload();
                    },
                    failure: function (response, opts) {
                        console.log('server-side failure with status code ' + response.status);
                    }
                });
            }
        };

        var onCommand = function (column, command, record, recordIndex, cellIndex) {
            Ext.Msg.alert('Command', 'Command = ' + command + '<br/>' + 'Column = ' + record);
        };

        function UpdateGrid() {
            App.windowForm.hide();
            Ext.getCmp('GridListItemType').getStore().reload();
        }
    </script>
}

@section example
{

    @(Html.X().Window()
        .ID("windowForm")
        .Modal(true)
        .Hidden(true)
        .Title("Tabs")
        .Width(580)
        .Height(200)
        .Layout(LayoutType.Fit)
        .Items(Html.X().FormPanel()
        .Url("/ItemType/SaveData")
        .ID("myFormPanel")
        .Title("Input New Item Type")
        .Frame(true)
        .Width(500)
        .BodyPadding(10)
        .FieldDefaults(fd => { fd.LabelWidth = 110; fd.LabelStyle = "color:green;padding-left:4px;"; })        
        .Items(items =>
            {
                items.Add(Html.X().TextField().ID("TxtId").FieldLabel("Id").Hidden(true));
                items.Add(Html.X().TextField().ID("TxtName").FieldLabel("Name").AllowBlank(false).BlankText("Name Tidak Boleh Kosong"));
                items.Add(Html.X().TextField().ID("TxtDescription").FieldLabel("Description").AllowBlank(false).BlankText("Description Tidak Boleh Kosong"));
            }
        )
        .Buttons(Html.X().Button()
                    .Text("Save")
                    .ID("btnNew")
                    .Icon(Icon.Disk)
                    .Listeners(ls =>
                    ls.Click.Handler = @"this.up('form').submit({ 
                                             url : '/ItemType/SaveData',
                                             success : function (form, action) {
                                                 eval(action.result.script);
                                             }
                                         });"
                                ),
                 Html.X().Button()
                    .Text("Save")
                    .ID("btnEdit")
                    .Hidden(true)
                    .Icon(Icon.Disk)
                    .Listeners(ls =>
                    ls.Click.Handler = @"this.up('form').submit({ 
                                             url : '/ItemType/SaveDataEdit',
                                             success : function (form, action) {
                                                 eval(action.result.script);
                                             }
                                         });"
                                ),
                 Html.X().Button()
                    .Text("Close")
                    .Icon(Icon.CogStop)
                    .Handler("App.windowForm.hide();")
            )
        )
    )
    @(Html.X().GridPanel()
        .Title("List Item Type")
        .ID("GridListItemType")
        .Width(700)
        .Store(
            Html.X().Store()
                .RemotePaging(true)
                .PageSize(10)
                .DataSource(Model)
                .Model(
                    Html.X().Model()
                    .Fields(
                        new ModelField("Id"),
                        new ModelField("Name"),
                        new ModelField("Description")
                    )
                )
                .ServerProxy(
                    Html.X().AjaxProxy()
                        .Url(Url.Action("GetData"))
                )                
        )
        .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("Add")
                            .Icon(Icon.Add)
                            .Handler("NewForm();")
                    )
            ) 
        .ColumnModel(
            Html.X().RowNumbererColumn(),
            Html.X().Column().Text("Name").DataIndex("Name").Flex(1),
            Html.X().Column().Text("Description").DataIndex("Description").Flex(1),
            Html.X().Column().Text("Action").Flex(1)
            .Commands(Html.X().ImageCommand()
                    .CommandName("Edit")
                    .Icon(Icon.NoteEdit)
                    .Text("Edit")
                    .ToolTip(tt => tt.Text = "Edit"),
                    Html.X().ImageCommand()
                    .CommandName("Delete")
                    .Icon(Icon.NoteDelete)
                    .Text("Delete")
                    .ToolTip(tt => tt.Text = "Delete")
                )
                .Listeners(ls =>
                    ls.Command.Handler =  "ActionForm(command, record);"
                )
        )
        .SelectionModel(
            Html.X().RowSelectionModel().Mode(SelectionMode.Multi)
        )
        .View(Html.X().GridView().StripeRows(true))
        .BottomBar(
            Html.X().PagingToolbar()
                .Items(
                    Html.X().Label("Page size:"),
                    Html.X().ToolbarSpacer(10),
                    Html.X().ComboBox()
                        .Width(80)
                        .Items("1", "2", "10", "20")
                        .SelectedItems("10")
                        .Listeners(l=>{
                            l.Select.Fn = "onComboBoxSelect";
                        })
                )                
                .Plugins(Html.X().ProgressBarPager())
        )        
    )
}